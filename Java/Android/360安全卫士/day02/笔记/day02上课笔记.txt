1. 自定义控件编写流程
	创建一个默认就能获取焦点的TextView
	1. 创建一个类继承至TextView,FocusTextView
	2. 重写其构造方法
		//使用在通过java代码创建控件
		public FocusTextView(Context context) {
			super(context);
		}
		
		//由系统调用(带属性+上下文环境构造方法)
		public FocusTextView(Context context, AttributeSet attrs) {
			super(context, attrs);
		}

		//由系统调用(带属性+上下文环境构造方法+布局文件中定义样式文件构造方法)
		public FocusTextView(Context context, AttributeSet attrs, int defStyle) {
			super(context, attrs, defStyle);
		}
	3. 将原有TextView上的isFocus方法默认修改为,能够获取焦点
		//重写获取焦点的方法,由系统调用,调用的时候默认就能获取焦点
		@Override
		public boolean isFocused() {
			return true;
		}
	4. 使用过程
		获取当前类的全路径名称,作为xml中的标签存在,其余属性的使用方式和TextView一致
		
		
2. GridView使用,和ListView使用方式类似
	列数(3列)
	数据填充(模块名称,模块图片)
	数据适配器一致的

	
3. 自定义组合控件
	1. 将已经编写好的布局文件,抽取到一个类中去做管理,下次还需要使用此布局结构的时候,
	  直接使用组合控件对应的对象.

	2. 将组合控件的布局,抽取到单独的一个xml中

	3. 通过一个单独的类,去加载此段布局文件.

	4. checkBox是否选中,决定SettingItemView是否开启,isCheck(){return checkbox.isCheck()}方法

	5. 提供一个SettingItemView,切换选中状态的方法setCheck(boolean isCheck)

	
4. 设置界面,事件传递过程
	SettingActivity对应布局文件的跟布局获取点击事件
	此事件传递给SettingItemView

	1. 点击在SettingItemView非CheckBox区域,事件就由SettingItemView去做响应
	2. 点击在SettingItemView中CheckBox区域,事件就由SettingItemView传递给CheckBox,由CheckBox去做响应
	   CheckBox响应当前的点击事件,则SettingItemView就不能再去响应此事件,不能调用onClick方法,去改变状态

	   解决此问题的方案为:不让checkBox响应点击事件
	   
	   
5. 自定义属性,(设置中心,有多个条目,在复用SettingItemView的时候,每一个条目对应的标示,描述内容都不一致)
	1. 查看源码,定义属性时候做法
		sdk所在目录\platforms\android-16\data\res\values\attrs.xml

		<resource>
			<declare-styleable name="TextView">
				<attr name="text" format="string"/>
			</declare-styleable>
		<resource>
	2. 给SettingItemView定义属性,工程res\values\attrs.xml
		<resource>
			<declare-styleable name="SettingItemView全类名">
				<attr name="destitle" format="string"/>
				<attr name="desoff" format="string"/>
				<attr name="deson" format="string"/>
			</declare-styleable>
		<resource>
	3. 自定义属性的使用
		定义名空间namespace
		mobilesafe替换掉原有android
		com.itheima.mobilesafe74必须这样编写,替换掉了android,代表当前应用自定义属性
		xmlns:mobilesafe="http://schemas.android.com/apk/res/com.itheima.mobilesafe74"

		<com.itheima.mobilesafe74.view.SettingItemView
		    xmlns:mobilesafe="http://schemas.android.com/apk/res/com.itheima.mobilesafe74"
		    android:id="@+id/siv_update"
		    android:layout_width="match_parent"
		    android:layout_height="wrap_content"
		    mobilesafe:destitle="自动更新设置"
		    mobilesafe:desoff="自动更新已关闭"
		    mobilesafe:deson="自动更新已开启">
	4. 获取属性值
	    mobilesafe:destitle="自动更新设置"
	    mobilesafe:desoff="自动更新已关闭"
	    mobilesafe:deson="自动更新已开启"
	    以上的是哪个属性都需要给自定义组合控件(SettingItemView)内部的两个TextView去使用,获取属性值
	
	//通过属性索引获取属性名称&属性值
	for(int i=0;i<attrs.getAttributeCount();i++){
		Log.i(tag, "name = "+attrs.getAttributeName(i));
		Log.i(tag, "value = "+attrs.getAttributeValue(i));
		Log.i(tag, "分割线 ================================= ");
	}
	//通过属性获取属性名称&名空间
	mDestitle = attrs.getAttributeValue(NAMESPACE, "destitle");
	mDesoff = attrs.getAttributeValue(NAMESPACE, "desoff");
	mDeson = attrs.getAttributeValue(NAMESPACE, "deson");

	5. 将获取的属性值,设置给title,des
		des根据是否点中决定
		true	deson
		false	desoff
	难
	
	
6. 自定义对话框
	设置一条xml---->view对象

	设置密码
		设置密码
		确认密码
		确认
		取消
	确认密码
		确认密码
		确认
		取消
		
		
6. 密码加密(了解)
	md5加密:将字符串转换成	32位的字符串(16进制字符(0~f))	不可逆	

	java工程


	123	202cb962ac59075b964b07152d234b70


	
	